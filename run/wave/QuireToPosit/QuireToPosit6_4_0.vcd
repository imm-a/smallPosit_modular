$version Generated by VerilatedVcd $end
$date Thu Sep 16 15:19:37 2021
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 1 clock $end
  $var wire  1 3 io_inValid $end
  $var wire  1 6 io_outValid $end
  $var wire  4 5 io_positOut [3:0] $end
  $var wire 16 4 io_quireIn [15:0] $end
  $var wire  1 2 reset $end
  $scope module QuireToPosit6_4_0 $end
   $var wire  6 ( absRealScale [5:0] $end
   $var wire  1 1 clock $end
   $var wire  1 3 io_inValid $end
   $var wire  1 6 io_outValid $end
   $var wire  4 5 io_positOut [3:0] $end
   $var wire 16 4 io_quireIn [15:0] $end
   $var wire  1 . outRawFloat_fraction $end
   $var wire  3 / outRawFloat_grs [2:0] $end
   $var wire  1 8 outRawFloat_isNaR $end
   $var wire  1 9 outRawFloat_isZero $end
   $var wire  3 0 outRawFloat_scale [2:0] $end
   $var wire  1 ' overflow $end
   $var wire 16 ) quireLeftShift [15:0] $end
   $var wire 16 * quireRightShift [15:0] $end
   $var wire 15 # quireXOR [14:0] $end
   $var wire  4 - realFGRS [3:0] $end
   $var wire  4 + realFGRSTmp1 [3:0] $end
   $var wire  4 , realFGRSTmp2 [3:0] $end
   $var wire  6 % realScale [5:0] $end
   $var wire  1 2 reset $end
   $var wire  5 $ scaleBias [4:0] $end
   $var wire  1 7 tailIsZero $end
   $var wire  1 & underflow $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b000000000000000 #
b10000 $
b111011 %
1&
0'
b000101 (
b0000000000000000 )
b0000000000000000 *
b0000 +
b0000 ,
b0000 -
0.
b000 /
b101 0
01
12
03
b0000000000000000 4
b0000 5
06
17
08
19
#1
11
#2
01
#3
11
#4
01
#5
11
#6
01
#7
11
#8
01
#9
11
#10
b000000000011000 #
b10101 $
b000000 %
0&
b000000 (
b0000000000010000 )
b0000000000010000 *
b000 0
01
02
13
b0000000000010000 4
07
09
#11
11
b0100 5
16
#12
b100000000000000 #
b11111 $
b001010 %
1'
b001010 (
b0000000000000000 )
b0000000000100000 *
b010 0
01
b1000000000000000 4
17
18
#13
11
b1000 5
#14
b000000000000000 #
b10000 $
b111011 %
1&
0'
b000101 (
b0000000000000000 *
b101 0
01
b0000000000000000 4
08
19
#15
11
b0000 5
#16
b000000000010000 #
b10101 $
b000000 %
0&
b000000 (
b1111111111100000 )
b1111111111100000 *
b000 0
01
b1111111111100000 4
07
09
#17
11
b1010 5
#18
b000000000001000 #
b10100 $
b111111 %
b000001 (
b0111111111111000 *
b1000 ,
b111 0
01
b1111111111110000 4
#19
11
b1100 5
#20
b000000000001001 #
b1111111111100010 )
b0010 +
b0010 -
b010 /
01
b1111111111110001 4
#21
11
#22
01
#23
11
