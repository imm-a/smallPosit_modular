$version Generated by VerilatedVcd $end
$date Thu Sep 16 15:19:02 2021
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 1 clock $end
  $var wire  4 4 io_A [3:0] $end
  $var wire  4 5 io_B [3:0] $end
  $var wire 16 6 io_E [15:0] $end
  $var wire  1 3 io_inValid $end
  $var wire  1 7 io_outValid $end
  $var wire  1 2 reset $end
  $scope module PositEMA6_4_0 $end
   $var wire  4 & absScale [3:0] $end
   $var wire  1 1 clock $end
   $var wire  1 8 decA_fraction $end
   $var wire  1 9 decA_isNaR $end
   $var wire  1 : decA_isZero $end
   $var wire  3 # decA_scale [2:0] $end
   $var wire  1 ; decB_fraction $end
   $var wire  1 < decB_isNaR $end
   $var wire  1 = decB_isZero $end
   $var wire  3 $ decB_scale [2:0] $end
   $var wire 16 ' extSig [15:0] $end
   $var wire  1 ( inValid_phase2 $end
   $var wire  1 , inValid_phase3 $end
   $var wire  4 4 io_A [3:0] $end
   $var wire  4 5 io_B [3:0] $end
   $var wire 16 6 io_E [15:0] $end
   $var wire  1 3 io_inValid $end
   $var wire  1 7 io_outValid $end
   $var wire  4 % mulScale [3:0] $end
   $var wire  4 + mulScale_phase2 [3:0] $end
   $var wire  6 * mulSig_phase2 [5:0] $end
   $var wire  1 > outIsNaR $end
   $var wire  1 ) outIsNaR_phase2 $end
   $var wire  1 - outIsNaR_phase3 $end
   $var wire  1 0 quireIsNaR $end
   $var wire 16 / quireReg [15:0] $end
   $var wire  1 2 reset $end
   $var wire 16 . shiftSig_phase3 [15:0] $end
   $var wire  3 ? sigA [2:0] $end
   $var wire  3 @ sigB [2:0] $end
   $var wire  6 A sigP [5:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b101 #
b101 $
b1010 %
b0000 &
b0000000000000000 '
0(
0)
b000000 *
b0000 +
0,
0-
b0000000000000000 .
b0000000000000000 /
00
01
12
03
b0000 4
b0000 5
b0000000000000000 6
07
08
09
1:
0;
0<
1=
0>
b000 ?
b000 @
b000000 A
#1
11
#2
01
#3
11
#4
01
#5
11
#6
01
#7
11
#8
01
#9
11
#10
b010 #
b110 $
b0000 %
01
02
13
b0111 4
b0001 5
0:
0=
b010 ?
b010 @
b000100 A
#11
b0000000000010000 '
1(
b000100 *
11
#12
b111 #
b000 $
b1111 %
01
b1100 4
b0100 5
b100 ?
b111000 A
#13
b0001 &
b1111111111100000 '
b111000 *
b1111 +
1,
b0000000000010000 .
11
#14
b101 #
b1101 %
01
b0000 4
1:
b000 ?
b000000 A
#15
b0011 &
b0000000000000000 '
b000000 *
b1101 +
b1111111111110000 .
b0000000000010000 /
11
b0000000000010000 6
17
#16
b110 #
b010 $
b0000 %
01
b1110 4
b0111 5
0:
b100 ?
b111000 A
#17
b0000 &
b1111111111100000 '
b111000 *
b0000 +
b0000000000000000 .
b0000000000000000 /
11
b0000000000000000 6
#18
b111 #
b111 $
b1110 %
01
b1100 4
b1100 5
b100 @
b010000 A
#19
b0010 &
b0000000001000000 '
b010000 *
b1110 +
b1111111111100000 .
11
#20
b110 #
b110 $
b1100 %
01
b0001 4
b0001 5
b010 ?
b010 @
b000100 A
#21
b0100 &
b0000000000010000 '
b000100 *
b1100 +
b0000000000010000 .
b1111111111100000 /
11
b1111111111100000 6
#22
b010 #
b0000 %
01
b0111 4
#23
b0000 &
b0000 +
b0000000000000001 .
b1111111111110000 /
11
b1111111111110000 6
#24
b111 #
b000 $
b1111 %
01
b1100 4
b0100 5
b100 ?
b111000 A
#25
b0001 &
b1111111111100000 '
b111000 *
b1111 +
b0000000000010000 .
b1111111111110001 /
11
b1111111111110001 6
#26
01
#27
b1111111111110000 .
b0000000000000001 /
11
b0000000000000001 6
