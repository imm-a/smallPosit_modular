$version Generated by VerilatedVcd $end
$date Thu Sep 16 15:18:34 2021
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 6 clock $end
  $var wire 32 8 io_A [31:0] $end
  $var wire 32 9 io_B [31:0] $end
  $var wire 32 : io_M [31:0] $end
  $var wire  1 7 reset $end
  $scope module PositMultiplier32_0 $end
   $var wire  1 + addOne $end
   $var wire  1 * addTwo $end
   $var wire  1 6 clock $end
   $var wire 29 # decA_fraction [28:0] $end
   $var wire  1 ; decA_isNaR $end
   $var wire  1 < decA_isZero $end
   $var wire  6 $ decA_scale [5:0] $end
   $var wire 29 % decB_fraction [28:0] $end
   $var wire  1 = decB_isNaR $end
   $var wire  1 > decB_isZero $end
   $var wire  6 & decB_scale [5:0] $end
   $var wire 29 3 decM_fraction [28:0] $end
   $var wire  1 A decM_isNaR $end
   $var wire  1 B decM_isZero $end
   $var wire  6 5 decM_scale [5:0] $end
   $var wire  1 2 decM_sign $end
   $var wire  3 , expBias [2:0] $end
   $var wire 59 - frac [58:0] $end
   $var wire 30 4 grsTmp [29:0] $end
   $var wire  2 ) head2 [1:0] $end
   $var wire 32 8 io_A [31:0] $end
   $var wire 32 9 io_B [31:0] $end
   $var wire 32 : io_M [31:0] $end
   $var wire  7 / mulScale [6:0] $end
   $var wire  1 1 overflow $end
   $var wire  1 7 reset $end
   $var wire 31 ? sigA [30:0] $end
   $var wire 31 @ sigB [30:0] $end
   $var wire 62 ' sigP [61:0] $end
   $var wire  1 0 underflow $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000 #
b100001 $
b00000000000000000000000000000 %
b100001 &
b00010000000000000000000000000000000000000000000000000000000000 '
b00 )
0*
0+
b000 ,
b00000000000000000000000000000000000000000000000000000000000 -
b1000010 /
10
01
02
b00000000000000000000000000000 3
b000000000000000000000000000000 4
b100001 5
06
17
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
0;
1<
0=
1>
b0100000000000000000000000000000 ?
b0100000000000000000000000000000 @
0A
1B
#1
16
#2
06
#3
16
#4
06
#5
16
#6
06
#7
16
#8
06
#9
16
#10
b11000000000000000000000000000 #
b000000 $
b100010 &
b00011100000000000000000000000000000000000000000000000000000000 '
b11000000000000000000000000000000000000000000000000000000000 -
b1100010 /
00
b11000000000000000000000000000 3
b100010 5
06
07
b01011000000000000000000000000000 8
b00000000000000000000000000000001 9
b00000000000000000000000000000010 :
0<
0>
b0111000000000000000000000000000 ?
0B
#11
16
#12
b00000000000000000000000000000 #
b100001 $
b11000000000000000000000000000 %
b000000 &
b11001000000000000000000000000000000000000000000000000000000000 '
b11 )
1+
b001 ,
b01000000000000000000000000000000000000000000000000000000000 -
12
b01000000000000000000000000000 3
06
b11111111111111111111111111111111 8
b01011000000000000000000000000000 9
b11111111111111111111111111111110 :
b1000000000000000000000000000000 ?
b0111000000000000000000000000000 @
#13
16
#14
b111111 &
b1100001 /
b100001 5
06
b00111000000000000000000000000000 9
b11111111111111111111111111111111 :
#15
16
#16
b11000000000000000000000000000 #
b111111 $
b00000000000000000000000000000 %
b100010 &
b00011100000000000000000000000000000000000000000000000000000000 '
b00 )
0+
b000 ,
b11000000000000000000000000000000000000000000000000000000000 -
02
b11000000000000000000000000000 3
06
b00111000000000000000000000000000 8
b00000000000000000000000000000001 9
b00000000000000000000000000000001 :
b0111000000000000000000000000000 ?
b0100000000000000000000000000000 @
#17
16
#18
06
#19
16
#20
06
#21
16
#22
06
#23
16
#24
06
#25
16
#26
06
#27
16
